# -*- coding: utf-8 -*-
"""reflexion_difusa_simple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dhUHVLJbZzXbg0si9TxzjCv7nr8VPyeq

Simular la reflexion difusa de una geometria simple
Con proyeccion paralela

JCA
"""

import numpy as np
import cv2 as cv
from google.colab.patches import cv2_imshow

def normalize(v):
    """ retorna el vector normalizado""" 
    norm = np.linalg.norm(v) 
    if norm == 0: 
        return v 
    return v/norm

# Propiedades de la imagen
w = 500
h = 500
im = np.zeros((h,w,3))


# Plano definido por dos puntos
# [(x_min, ymin) y (x_max, y_max)]
# ubicado 
plano = [(100,100, 100), (300, 300, 100)]
normal = [(0, 0, -1)]
color = np.array([0.5, 0.2, 0.8])
albedo = 0.18

# Punto de luz
l_pos = np.array([150,150,80])
l_int = 20


def draw(im, plano, normal, albedo, color, l_pos, l_int):
    z= plano[0][2]
    N = normalize(normal)
    for i in range(plano[0][0], plano[1][0]):
        for j in range(plano[0][1], plano[1][1]):
            p = np.array([i,j,z])
            L = normalize(l_pos-p)
            diff_color = (albedo/np.pi) * l_int * color * np.abs(np.dot(N, L))

            im[j,i] = diff_color*255
    cv2_imshow(im)

draw(im, plano, normal, albedo,  color, l_pos, l_int)
